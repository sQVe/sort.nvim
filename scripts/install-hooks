#!/usr/bin/env bash

# Enable strict error handling
set -euo pipefail

# Colors for output
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly RED='\033[0;31m'
readonly NC='\033[0m' # No Color

# Script description
readonly SCRIPT_NAME="${0##*/}"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_DIR
PROJECT_ROOT="$(cd "${SCRIPT_DIR}/.." && pwd)"
readonly PROJECT_ROOT
readonly HOOKS_DIR="${PROJECT_ROOT}/hooks"
readonly GIT_HOOKS_DIR="${PROJECT_ROOT}/.git/hooks"

# Function to display usage
usage() {
  cat << EOF
Usage: ${SCRIPT_NAME} [OPTIONS]

Install git hooks for the sort.nvim project.

Options:
  -h, --help    Display this help message
  -f, --force   Force install without prompting

Example:
  ${SCRIPT_NAME}
  ${SCRIPT_NAME} --force
EOF
}

# Function to print colored output
print_error() {
  echo -e "${RED}Error: $1${NC}" >&2
}

print_warning() {
  echo -e "${YELLOW}Warning: $1${NC}"
}

print_success() {
  echo -e "${GREEN}✓ $1${NC}"
}

# Parse command line arguments
FORCE_INSTALL=false
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h | --help)
      usage
      exit 0
      ;;
    -f | --force)
      FORCE_INSTALL=true
      shift
      ;;
    *)
      print_error "Unknown option: $1"
      usage
      exit 1
      ;;
  esac
done

# Check if we're in a git repository
if [[ ! -d "${PROJECT_ROOT}/.git" ]]; then
  print_error "Not in a git repository"
  exit 1
fi

# Check if hooks directory exists
if [[ ! -d "${HOOKS_DIR}" ]]; then
  print_error "Hooks directory not found at ${HOOKS_DIR}"
  exit 1
fi

# Install pre-commit hook
if [[ -f "${HOOKS_DIR}/pre-commit" ]]; then
  # Check if hook already exists
  if [[ -e "${GIT_HOOKS_DIR}/pre-commit" ]]; then
    if [[ "${FORCE_INSTALL}" == "true" ]]; then
      rm -f "${GIT_HOOKS_DIR}/pre-commit"
    else
      print_warning "pre-commit hook already exists"
      read -r -p "Do you want to replace it? [y/N] " response
      case "${response}" in
        [yY][eE][sS] | [yY])
          rm -f "${GIT_HOOKS_DIR}/pre-commit"
          ;;
        *)
          echo "Skipping pre-commit hook installation"
          exit 0
          ;;
      esac
    fi
  fi

  # Verify target exists and is readable
  if [[ ! -r "${HOOKS_DIR}/pre-commit" ]]; then
    print_error "Cannot read pre-commit hook at ${HOOKS_DIR}/pre-commit"
    exit 1
  fi

  # Create symlink
  if ln -s "${HOOKS_DIR}/pre-commit" "${GIT_HOOKS_DIR}/pre-commit"; then
    print_success "Installed pre-commit hook"

    # Make sure the hook is executable
    if [[ -x "${HOOKS_DIR}/pre-commit" ]]; then
      print_success "Pre-commit hook is executable"
    else
      print_warning "Making pre-commit hook executable"
      chmod +x "${HOOKS_DIR}/pre-commit"
    fi
  else
    print_error "Failed to create symlink for pre-commit hook"
    exit 1
  fi

  # Check if formatters are installed
  echo ""
  if ! type -P stylua > /dev/null 2>&1; then
    print_warning "stylua is not installed"
    echo "Install it with one of these methods:"
    echo "  • cargo install stylua"
    echo "  • brew install stylua (macOS)"
    echo "  • Download from: https://github.com/JohnnyMorganz/StyLua/releases"
    echo ""
  fi

  if ! type -P shfmt > /dev/null 2>&1; then
    print_warning "shfmt is not installed"
    echo "Install it with one of these methods:"
    echo "  • go install mvdan.cc/sh/v3/cmd/shfmt@latest"
    echo "  • brew install shfmt (macOS)"
    echo "  • Download from: https://github.com/mvdan/sh/releases"
    echo ""
  fi
else
  print_error "pre-commit hook not found at ${HOOKS_DIR}/pre-commit"
  exit 1
fi

echo ""
echo "Git hooks installed successfully!"
echo "The pre-commit hook will automatically format:"
echo "  • Lua files with stylua"
echo "  • Shell scripts with shfmt"
